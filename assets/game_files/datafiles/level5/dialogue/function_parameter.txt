ðŸš€ Function Parameters in Python ðŸŽ¯
Functions are awesome because they let us pass data and make them flexible! The values you send into a function are called parameters (or arguments). Letâ€™s break it down!

ðŸ›  1. Positional Parameters (Order Matters!)
These are the default way to pass arguments. The order must match the function definition.
âœ… Example:
def greet(name, age):
    print(f"Hello {name}, you are {age} years old! ðŸ˜Š")
greet("Alice", 25)  # Output: Hello Alice, you are 25 years old!
ðŸ”¥ Note: "Alice" is passed to name, and 25 to age in the same order.

ðŸŽ¯ 2. Default Parameters (Set a Backup Value!)
If no value is given, Python uses the default value instead.
âœ… Example:
def greet(name="Guest"):
    print(f"Hello {name}! ðŸ˜Š")
greet()  # Output: Hello Guest!
greet("Bob")  # Output: Hello Bob!
ðŸ’¡ Why use default values? To avoid errors when arguments are missing!

ðŸ”„ 3. Keyword Arguments (Order Doesnâ€™t Matter!)
Instead of relying on position, we specify parameter names while calling the function!
âœ… Example:
def order(food, drink):
    print(f"You ordered {food} with {drink}.")
order(drink="Coke", food="Pizza")  
# Output: You ordered Pizza with Coke.
ðŸ”¥ Why use this?
âœ” Makes code clearer
âœ” No need to remember the order!

ðŸ”¢ *4. Arbitrary Arguments (args) â€“ Multiple Values!
Sometimes, we donâ€™t know how many arguments we need. *args allows passing multiple values!

âœ… Example:
def sum_numbers(*nums):
    total = sum(nums)
    print(f"Total sum: {total}")
sum_numbers(2, 4, 6, 8)  # Output: Total sum: 20
ðŸ’¡ *args collects all extra arguments as a tuple.
ðŸ”‘ **5. Arbitrary Keyword Arguments (kwargs) â€“ Multiple Key-Value Pairs!
If we need multiple named arguments, we use **kwargs.
âœ… Example:
def person_details(**info):
    for key, value in info.items():
        print(f"{key}: {value}")
person_details(name="Alice", age=25, city="NYC")
ðŸ’¡ **kwargs collects arguments into a dictionary {}.

ðŸš€ Mastering function parameters = More flexible & powerful Python code! ðŸ”¥