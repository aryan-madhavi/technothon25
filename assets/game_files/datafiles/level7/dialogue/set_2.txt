ðŸ“Œ Set Methods in Python ðŸ”¥
ðŸ”¹ Adding & Removing Elements
You can add new items to a set using .add() and remove existing items using .remove() or .discard().
fruits.add("mango")  # Adds "mango" to the set
print(fruits)
fruits.remove("banana")  # Removes "banana" (raises error if not found)
fruits.discard("grape")  # Removes "grape" if present (no error if not found)
ðŸ”¹ Using .pop(): Since sets are unordered, .pop() removes a random element.
fruits.pop()  # Removes a random element from the set
ðŸ”¹ Clearing the Set:
fruits.clear()  # Removes all elements from the set
print(fruits)  # Output: set()

ðŸ”¹ Set Operations (Union, Intersection, Difference)
Sets support powerful mathematical operations like union, intersection, and difference.
A = {1, 2, 3, 4}
B = {3, 4, 5, 6}
# ðŸ”¹ Union: Combines all unique elements from both sets
print(A.union(B))  # Output: {1, 2, 3, 4, 5, 6}
# ðŸ”¹ Intersection: Returns elements common in both sets
print(A.intersection(B))  # Output: {3, 4}
# ðŸ”¹ Difference: Elements in A but not in B
print(A.difference(B))  # Output: {1, 2}
# ðŸ”¹ Symmetric Difference: Elements in either A or B, but not both
print(A.symmetric_difference(B))  # Output: {1, 2, 5, 6}

ðŸ”¹ Looping Through a Set
Since sets are iterable, you can use a for loop to go through each element.
for fruit in fruits:
    print(fruit)
ðŸ”¹ Set Comparisons
You can check if one set is a subset or superset of another.

A = {1, 2, 3}
B = {1, 2, 3, 4, 5}
print(A.issubset(B))  # Output: True (A is a subset of B)
print(B.issuperset(A))  # Output: True (B is a superset of A)

ðŸ“Œ Key Takeaways
âœ… Sets store unique, unordered values.
âœ… Fast lookups using in.
âœ… Powerful operations like union, intersection, and difference.
âœ… Mutable (can add/remove elements) but unordered (no indexing).

ðŸš€ Sets are great for handling unique, unordered data efficiently! ðŸ”¥