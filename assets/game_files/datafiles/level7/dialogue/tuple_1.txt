📌 Tuples in Python – Definition & Usage! 🚀
A tuple in Python is like a locked playlist 🎵—once you create it, you can’t change its elements. It’s an ordered, immutable collection that allows duplicates and is defined using parentheses ().

🔹 What is a Tuple?
✅ Ordered – Elements maintain their order.
✅ Immutable – You can’t change, add, or remove elements after creation.
✅ Allows Duplicates – You can store repeated values.
✅ Faster than Lists – Since tuples are immutable, they are optimized for speed and memory.

🎯 Creating a Tuple
# Creating a tuple with values
fruits = ("apple", "banana", "cherry")
# Creating an empty tuple
empty_tuple = ()
# Single-element tuple (comma is required!)
single_tuple = ("apple",)  # ✅ Correct
not_a_tuple = ("apple")  # ❌ This is just a string!

🔹 Accessing Tuple Elements
Tuples support indexing and slicing just like lists!
print(fruits[0])  # Output: apple
print(fruits[-1])  # Output: cherry
# Slicing a tuple
print(fruits[0:2])  # Output: ('apple', 'banana')

🔹 Looping Through a Tuple
You can iterate over a tuple using a for loop.
for fruit in fruits:
    print(fruit)
    
🔹 When to Use Tuples?
✔ When you want data to remain unchanged (e.g., months of the year).
✔ When you need faster access than lists.
✔ When storing fixed collections of items.
✔ When using keys in a dictionary (since tuples are immutable).